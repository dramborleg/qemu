#!/usr/bin/env python
#
# Tests for the format probe functions
#
# Copyright (C) 2016 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import iotests

imgs = {'bochs': ['empty.bochs'],
        'cloop': ['simple-pattern.cloop'],
        'dmg': ['empty.dmg'],
        'luks': ['empty.luks'],
        'parallels': ['parallels-v1', 'parallels-v2'],
        'qcow': ['empty.qcow'],
        'qcow2': ['empty.qcow2'],
        'qed': ['empty.qed'],
        'raw': ['grub_mbr.raw'],
        'vdi': ['empty.vdi'],
        'vhdx': ['iotest-dynamic-1G.vhdx'],
        'vmdk': ['iotest-version3.vmdk'],
        'vpc': ['virtualpc-dynamic.vhd']}

class TestProbingFormats(iotests.QMPTestCase):
    def setUp(self):
        self.vm = iotests.VM()
        self.img_paths = []
        luks_opts = ''
        if iotests.imgfmt == 'luks':
            luks_opts = (',key-secret=sec0')
        for img_name in imgs[iotests.imgfmt]:
            self.img_paths.append(iotests.use_sample_image(img_name))
            self.vm.add_drive_raw('if=none,file=%s,readonly%s' %
                                  (self.img_paths[-1], luks_opts))
        if iotests.imgfmt == 'luks':
            self.vm.use_luks()
        if iotests.imgfmt != 'raw':
            self.img_paths.append(iotests.use_sample_image(imgs['raw'][0]))
            self.vm.add_drive_raw('if=none,file=%s,readonly' %
                                  (self.img_paths[-1]))
        self.vm.launch()

    def tearDown(self):
        self.vm.shutdown()
        for img in self.img_paths:
            iotests.rm_test_image(img)

    def test_probe_detects_format(self):
        result = self.vm.qmp('query-block')
        for i in range(len(self.img_paths) - 1):
            self.assert_qmp(result, 'return[%d]/inserted/image/format' %
                            i, iotests.imgfmt)

    def test_probe_detects_raw(self):
        result = self.vm.qmp('query-block')
        self.assert_qmp(result, 'return[%d]/inserted/image/format' %
                        (len(self.img_paths) - 1), 'raw')

if __name__ == '__main__':
    iotests.main(supported_fmts=imgs.keys())
